diff --git a/path.js b/path.js
index 268cfe0..0e0f8d5 100644
--- a/path.js
+++ b/path.js
@@ -77,7 +77,7 @@ class Subgraph {
     }
 
     ///////////////////////
-    /// API CALLS
+    /// HELPERS
     ///////////////////////
 
     mapAdd(node, ancestry) {
@@ -99,7 +99,7 @@ class Subgraph {
     }
 
     ///////////////////////
-    /// WIKIMEDIA API
+    /// API CALLS
     ///////////////////////
 
     async wikiJSON(base, params, page) {
@@ -113,23 +113,17 @@ class Subgraph {
         let params;
 
         switch(requestType) {
-
             case "children":
                 params="generator=links&plnamespace=0&gpllimit=500&pageids=";
-                break;
             case "parents":
                 params="generator=backlinks&blnamespace=0&gbllimit=500&gblpageid=";
-                break;
             case "title":
                 params="prop=links&plnamespace=0&pllimit=max&pageids=";
-                break;
             case "id":
                 params="prop=links&plnamespace=0&pllimit=max&titles=";
-                break;
         }
-
         let json = await this.wikiJSON(base, params, page);
-        let pages = await json.query.pages;
+        let pages = json.query.pages;
 
         if (requestType === "title") {return pages[0].title;}
         else if (requestType === "id") {return pages[0].pageid;}
@@ -137,10 +131,4 @@ class Subgraph {
     }
 }
 
-/*
-const shortest = new Subgraph("Donald Trump", "Barack Obama");
-const path = await shortest.path();
-console.log(path);
-*/
-
 export default Subgraph;
\ No newline at end of file
diff --git a/test.js b/test.js
index 0c890f0..d21d147 100644
--- a/test.js
+++ b/test.js
@@ -42,27 +42,25 @@ class Request {
     async get(page) {
         const base = "https://en.wikipedia.org/w/api.php?action=query&format=json&formatversion=2&";
         let params;
-        let json;
 
         switch(true) {
-
             case flags.children:
                 params="generator=links&plnamespace=0&gpllimit=500&pageids=";
-                json = await wikiJSON(base, params, page);
-                return json.query.pages.map(page => page.pageid);
             case flags.backlinks:
                 params="generator=backlinks&blnamespace=0&gbllimit=500&gblpageid=";
-                json = await wikiJSON(base, params, page);
-                return json.query.pages.map(page => page.pageid);
             case flags.title:
                 params="prop=links&plnamespace=0&pllimit=max&pageids=";
-                json = await wikiJSON(base, params, page);
-                return json.query.pages[0].title;
             case flags.id:
                 params="prop=links&plnamespace=0&pllimit=max&titles=";
-                json = await wikiJSON(base, params, page);
-                return json.query.pages[0].pageid;
         }
+
+        let json = await wikiJSON(base, params, page);
+        let pages = await json.query.pages;
+
+        if (flags.title) {return pages[0].title;}
+        else if (flags.id) {return pages[0].pageid;}
+        else {return pages.map(page => page.pageid);};
+
     }
 }
 
